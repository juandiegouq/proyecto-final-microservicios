services:
  # Base de datos servicio CRUD usuarios
  user-crud-service-database:
    image: postgres:latest
    container_name: user-crud-service-database
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
  
  # Base de Datos servicio de logs
  logs-service-database:
    image: postgres:latest
    container_name: logs-service-database
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: logsdb 
    volumes:
      - postgres_data2:/var/lib/postgresql/data
    ports:
      - "5433:5432"  
    networks:
      - backend

  # MongoDB para el servicio de monitoreo
  monitoring-service-database:
    image: mongo:latest  # Usar la imagen oficial de MongoDB
    container_name: monitoring-service-database
    volumes:
      - mongo_data:/data/db  # Persistir los datos de la base de datos
    ports:
      - "27017:27017"  # Exponer el puerto 27017 para acceso desde otros servicios
    networks:
      - backend

  # Aplicación Java (Spring Boot)
  user-crud-service:
    build:
      context: .
      dockerfile: user_crud_service/Dockerfile  # Ruta con guion bajo
    container_name: user-crud-service
    environment:
      DB_HOST: user-crud-service-database
      DB_PORT: 5432
      DB_NAME: mydatabase
      DB_USER: user
      DB_PASSWORD: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    ports:
      - "8080:8080"
    depends_on:
      - user-crud-service-database
      - rabbitmq
    networks:
      - backend

  # Servicio de logs 
  logs-service:
    build:
      context: .
      dockerfile: logs_service/Dockerfile  # Ruta con guion bajo
    container_name: logs-service
    environment:
      DB_URL: 'postgresql://user:password@logs-service-database:5432/logsdb'
    ports:
      - "8000:8000"
    depends_on:
      - logs-service-database
    networks:
      - backend

  # Servicio de monitoreo
  monitoring-service:
    build:
      context: .
      dockerfile: monitoring_service/Dockerfile  # Ruta con guion bajo
    container_name: monitoring-service
    environment:
      - MONGO_URI=mongodb://monitoring-service-database:27017/monitoring  # Conexión a la base de datos MongoDB
      - MONITOR_INTERVAL=60000  # Intervalo de monitoreo en milisegundos
      - NOTIFICATION_EMAIL=monitoring@ejemplo.com  # Correo para notificaciones
    ports:
      - "3000:3000"  # Exponer el puerto 3000 del contenedor al puerto 3000 del host
    depends_on:
      - monitoring-service-database  # El servicio de monitoreo depende de la base de datos MongoDB
    networks:
      - backend
    restart: always


  # Servicio RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: root
    networks:
      - backend

volumes:
  postgres_data: {}
  postgres_data2: {}
  mongo_data: {}

networks:
  backend:
