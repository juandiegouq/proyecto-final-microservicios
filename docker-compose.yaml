services:
  # Base de datos servicio CRUD usuarios
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
  
  # Base de Datos servicio de logs
  postgres2:
    image: postgres:latest
    container_name: postgres2
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: logsdb 
    volumes:
      - postgres_data2:/var/lib/postgresql/data
    ports:
      - "5433:5432"  
    networks:
      - backend

  # MongoDB para el servicio de monitoreo
  mongo:
    image: mongo:latest  # Usar la imagen oficial de MongoDB
    container_name: mongo
    volumes:
      - mongo_data:/data/db  # Persistir los datos de la base de datos
    ports:
      - "27017:27017"  # Exponer el puerto 27017 para acceso desde otros servicios
    networks:
      - backend

  # Aplicación Java (Spring Boot)
  app:
    build:
      context: .
      dockerfile: user_crud_service/Dockerfile
    container_name: java_app
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: mydatabase
      DB_USER: user
      DB_PASSWORD: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - rabbitmq
      # - logstash
    networks:
      - backend
      - elk

  #Servicio de logs 
  logs:
    build:
      context: .
      dockerfile: logs_service/Dockerfile
    container_name: logs_app
    environment:
      DB_URL: 'postgresql://user:password@postgres2:5432/logsdb'
    ports:
      - "8000:8000"
    depends_on:
      - postgres2
    networks:
      - backend

  # Servicio de monitoreo
  monitoring_service:
    build:
      context: .
      dockerfile: monitoring_service/Dockerfile
    container_name: monitoring_service
    environment:
      - MONGO_URI=mongodb://mongo:27017/monitoring  # Conexión a la base de datos MongoDB
      - MONITOR_INTERVAL=60000  # Intervalo de monitoreo en milisegundos
      - NOTIFICATION_EMAIL=monitoring@ejemplo.com  # Correo para notificaciones
    ports:
      - "3000:3000"  # Exponer el puerto 3000 del contenedor al puerto 3000 del host
    depends_on:
      - mongo  # El servicio de monitoreo depende de la base de datos MongoDB
    networks:
      - backend
    restart: always


  # Servicio RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: root
    networks:
      - backend

  # Elasticsearch para almacenar los logs
  # elasticsearch:
  #   image: elasticsearch:7.16.2
  #   container_name: elasticsearch
  #   restart: always
  #   volumes:
  #     - elastic_data:/usr/share/elasticsearch/data/
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx256m -Xms256m"
  #     discovery.type: single-node
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   networks:
  #     - elk

  # Logstash para procesar los logs
  # logstash:
  #   image: logstash:7.16.2
  #   container_name: logstash
  #   restart: always
  #   volumes:
  #     - ./logstash/:/logstash_dir
  #   command: logstash -f /logstash_dir/logstash.conf
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - "9600:9600"
  #     - "5000:5000"  # Puerto donde Logstash recibe logs
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   networks:
  #     - elk

  # Kibana para visualizar los logs
  # kibana:
  #   image: kibana:7.16.2
  #   container_name: kibana
  #   restart: always
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - elk

volumes:
  postgres_data: {}
  postgres_data2: {}
  mongo_data: {}
  # elastic_data: {}

networks:
  backend:
  elk:
